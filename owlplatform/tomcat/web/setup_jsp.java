/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.90
 * Generated at: 2018-08-24 03:19:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.setup;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.JSONObject;
import net.xinshi.isone.modules.IsoneModulesEngine;
import net.xinshi.isone.modules.user.LoginSessionUtils;
import net.xinshi.isone.modules.user.IUserService;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import net.xinshi.pigeon.util.ClientTools;
import net.xinshi.pigeon.adapter.StaticPigeonEngine;
import org.json.JSONArray;
import java.io.FileInputStream;
import java.io.File;
import net.xinshi.is1.appmarket.bean.App;
import net.xinshi.isone.commons.Util;
import net.xinshi.isone.modules.appmarket.Is1AppMarketEngine;
import java.net.URL;
import java.io.InputStream;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.codec.binary.Hex;

public final class setup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    //1.首先检查是否已经初始化过
    String rootUserId = "u_0";
    JSONObject jRootUser = IsoneModulesEngine.userService.getUser(rootUserId);
    String userId = LoginSessionUtils.getBackendLoginUserId(request);

    if (jRootUser != null && (userId == null || !userId.equals(IUserService.ADMIN_ROOT_ID))) {
        JSONObject jret = new JSONObject();
        jret.put("state","error");
        jret.put("msgs","owl已经执行过初始化程序");
//        return;
    }

    String setupDir = System.getenv("SETUP_DIR");


    File f = new File(setupDir,"init.jsx");
    FileInputStream fis = new FileInputStream(f);
    byte[] buf = new byte[(int) f.length()];
    fis.read(buf);
    fis.close();



    String theScript = new String(buf,"utf-8");
    String saasAccountIds = "saas_50000";
    String[] idArray = saasAccountIds.split(",");

    List<String> serverLibs = new ArrayList<String>();
    {
        URL url = getClass().getClassLoader().getResource("jsLib");
        String path = url.getFile();
        serverLibs.add(path);
    }

    List<String> idList = new ArrayList<String>();
    for(String id : idArray){
        idList.add(id);
    }

    HashMap extra = new HashMap();
    extra.put("system","mall");
//        String patchId =PatchEngine.mallPatchService.execPatchWithExtra(theScript,comment,version,idList,serverLibs,extra);
    List<String> errs = new ArrayList<String>();
    List<String> outMsg = ClientTools.executePigeonScript20(theScript,errs,serverLibs, StaticPigeonEngine.pigeon,extra);
    JSONObject jret = new JSONObject();
    JSONArray jmsgs = new JSONArray();
    for(String s : outMsg){
        jmsgs.put(s);
    }

    //安装默认的apps
    File installConfig =  new File(setupDir,"init.json");
    buf = new byte[(int) installConfig.length()];
    FileInputStream fisInstallConfig = new FileInputStream(installConfig);
    fisInstallConfig.read(buf);


    String sInstallConfig = new String(buf,"utf-8");
    sInstallConfig = Util.expandEnvVars(sInstallConfig);
    JSONObject jsonConfig = new JSONObject(sInstallConfig);

    JSONArray apps = jsonConfig.getJSONArray("apps");
    for(int i=0; i<apps.length(); i++){
        JSONObject japp = apps.getJSONObject(i);
        App app = new App();

        app.setZipFileId(japp.getString("file"));
        URL url = new URL(app.getZipFileId());
        InputStream is = url.openStream();

        String md5 = Hex.encodeHexString(DigestUtils.md5(is));
        is.close();
        app.setMd5(md5);
        app.setAppType(App.AppType.independentApp);
        app.setName(japp.getString("name"));
        app.setId(japp.getString("id"));
        String saasAccountId = Util.getSaasId();
        Is1AppMarketEngine.installer.installApp(app, saasAccountId, "head_merchant");
        jmsgs.put(app.getId() + " installed");
    }

    jret.put("state","ok");
    jret.put("msgs",jmsgs);
    out.print(jret.toString());



    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
